(define part1
  (λ [input]
    (let [cs (str:chars input)]
      (- (count (λ [x] (= x '(')) cs)
         (count (λ [x] (= x ')')) cs)))))

(define part2
  (λ [input]
     (let [inner (λ [instructions idx floor]
                    (cond (= floor -1) idx
                          (empty? instructions) nil
                          :else (let [cur (first instructions)]
                                  (recur (rest instructions)
                                         (+ idx 1)
                                         (+ floor (if (= '(' cur) 1 -1))))))]
       (inner (seq (str:chars input)) 0 0))))

(let [input (str:trim (io:read-file "examples/adventofcode2015/input/1.txt"))]
  [(part1 input)
   (part2 input)])
