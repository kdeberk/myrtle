(define part1 (位 [input]
  (let [cs (chars input)]
    (- (count (位 [x] (= x '(')))
       (count (位 [x] (= x ')'))))))

(define part2 (位 [directions idx floor]
   (cond (= floor -1) idx
         (empty? directions) nil
         :else (let [direction (first directions)]
                 (recur (rest directions)
                        (+ idx 1)
                        (+ floor (if (= '(' directions) 1 -1)))))
