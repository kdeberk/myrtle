(define min
  (λ [& xs]
    (reduce (λ [acc x] (if (<= acc x) acc x))
            xs)))

(define parse-input
  (λ [input]
     (map (λ [box] (vec (map (λ [dim] (convert dim :integer))
                             (str:split box 'x'))))
          (str:split input '\n'))))

(define part1
  (λ [boxes]
    (reduce +
      (map (λ [[w h l]]
              (+ (* 2 w h) (* 2 w l) (* 2 h l)
                 (min (* w h) (* w l) (* h l))))
           boxes))))

(define part2
  (λ [boxes]
    (reduce +
      (map (λ [[w h l]]
              (+ (* 2 (min (+ w h) (+ w l) (+ h l)))
                 (* w h l)))
           boxes))))

(let [input (str:trim (io:read-file "examples/adventofcode2015/input/2.txt"))]
  (let [input (parse-input input)]
    [(part1 input)
     (part2 input)]))
