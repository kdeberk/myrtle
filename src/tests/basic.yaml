# Literal expressions
- name: "simple int"
  expr: "1"
  value: 1
- name: "scientific notation int"
  expr: "3e6"
  value: 3000000
- name: "fractional notation"
  expr: "3/6"
  value: 1/2
- name: "fractional notation for int"
  expr: "6/3"
  value: 2
- name: "negative integer"
  expr: -1
  value: -1
- name: "negative ratio"
  expr: -3/6
  value: -1/2
- name: "simple string"
  expr: '"Hello, World!"'
  value: '"Hello, World!"'
- name: "simple char"
  expr: "'f'"
  value: "'f'"
- name: "unicode char"
  expr: "'你'"
  value: "'你'"
- name: "known symbol"
  expr: "(quote foo)" # TODO: use '
  value: foo
- name: "boolean true"
  expr: "true"
  value: true
- name: "boolean false"
  expr: "false"
  value: false
- name: "nil value"
  expr: "nil"
  value: null
- name: "undefined value"
  expr: "undefined"
  value: undefined

# Mathematical expressions
- name: "add - one int parameter"
  expr: "(+ 1)"
  value: 1
- name: "add - two int parameters"
  expr: "(+ 1 2)"
  value: 3
- name: "add - three int parameters"
  expr: "(+ 1 2 3)"
  value: 6
- name: "add - int and ratio parameters"
  expr: "(+ 1 (/ 1 2) (/ 1 4))"
  value: 7/4
- name: "add - int and ratio notation parameters"
  expr: "(+ 1 1/2 1/4)"
  value: 7/4
- name: "add - two ratios"
  expr: "(+ (/ 1 2) (/ 1 2))"
  value: 1
- name: "add - with undefined parameter"
  expr: "(+ 1 (/ 1 0))"
  value: undefined
- name: "subtract - with single int parameter"
  expr: "(- 10)"
  value: -10
- name: "subtract - with single ratio parameter"
  expr: "(- (/ 1 4))"
  value: -1/4
- name: "subtract - with multiple int parameters"
  expr: "(- 10 1)"
  value: 9
- name: "subtract - with int and ratio parameters"
  expr: "(- 2 (/ 1 2))"
  value: 3/2
- name: "subtract - with two ratio parameters"
  expr: "(- (/ 3 2) (/ 1 2))"
  value: 1
- name: "subtract - with undefined parameter"
  expr: "(- 1 (/ 1 0))"
  value: undefined
- name: "multiply - three int parameters"
  expr: "(* 1 2 3)"
  value: 6
- name: "multiply - with int and ratio parameters"
  expr: "(* 2 (/ 7 6))"
  value: 7/3
- name: "multiply - with undefined parameter"
  expr: "(* 1 (/ 1 0))"
  value: undefined
- name: "divide - int parameters to int"
  expr: "(/ 10 2)"
  value: 5
- name: "divide - int parameters to ratio"
  expr: "(/ 18 12)"
  value: 3/2
- name: "divide - by zero"
  expr: "(/ 1 0)"
  value: undefined
- name: "divide - with int and ratio parameters"
  expr: "(/ 2 (/ 7 6))"
  value: 12/7
- name: "divide - with undefined parameter"
  expr: "(/ 2 undefined)"
  value: undefined


# Combining expressions
- name: "list with data"
  expr: "(list 1 2 3)"
  value: "(1 2 3)"
- name: "empty list"
  expr: "(list)"
  value: "nil"
- name: "combine sequence"
  expr: "(combine 1 (combine 2 (combine 3 nil)))"
  value: "(1 2 3)"
- name: "combine atom and list"
  expr: "(combine 1 (list 2 3))"
  value: "(1 2 3)"
- name: "atom? with atomic parameter"
  expr: "(atom? 1)"
  value: "true"
- name: "atom? with list parameter"
  expr: "(atom? (list 1 2))"
  value: "false"
- name: "atom? with cons parameter"
  expr: "(atom? (combine 1 2))"
  value: "false"
- name: "nil? with nil parameter"
  expr: "(nil? nil)"
  value: "true"
- name: "nil? with non-nil parametr"
  expr: "(nil? 1)"
  value: "false"
- name: "nil? with symbol"
  expr: "(let [sym nil] (nil? sym))"
  value: "true"

# Comparison expressions
- name: "true equality for two integers"
  expr: "(= 1 1)"
  value: true
- name: "true equality for more integers"
  expr: "(= 1 1 1)"
  value: true
- name: "false equality for two integers"
  expr: "(= 1 2)"
  value: false
- name: "false equality for more integers"
  expr: "(= 1 1 2)"
  value: false
- name: "true less than or equal to for two integers"
  expr: "(<= 1 2)"
  value: true
- name: "false less than or equal to for two integers"
  expr: "(<= 2 1)"
  value: false
- name: "true less than or equal to for three integers"
  expr: "(<= 1 2 3)"
  value: true
- name: "false less than or equal to for more integers"
  expr: "(<= 2 1 3)"
  value: false


# Lambda expressions
- name: "lambda call"
  expr: "((λ [x] (+ x 1)) 11)"
  value: 12
- name: "lambda curry"
  expr: >-
    (let [curry (λ [fn x] (λ [y] (fn x y)))]
      ((curry + 10) 20))
  value: 30
- name: "y combinator"
  expr: >-
    (let [Y (λ [f]
             ((λ [g] (g g))
              (λ [g] (f (λ [x] ((g g) x))))))
          fact (λ [f]
                (λ [x]
                  (if (= 1 x)
                      1
                      (* x (f (- x 1))))))]
      ((Y fact) 5))
  value: 120
- name: "lambda with rest parameter"
  expr: "((λ [& xs] xs) 1 2 3 4)"
  value: "(1 2 3 4)"
- name: "lambda with normal and rest parameters"
  expr: "((λ [a b & xs] [a b xs]) 1 2 3 4)"
  value: "[1 2 (3 4)]"
- name: "lambda with vec parameter"
  expr: "((λ [[a b]] (+ a b)) [1 2])"
  value: 3
- name: "lambda with nested rest parameter"
  expr: "((λ [[a b & cs]] [a b cs]) [1 2 3 4])"
  value: "[1 2 (3 4)]"
- name: "labmbda with normal, vec and rest parameters"
  expr: "((λ [a [b c] & ds] [(+ a b c) ds]) 1 [2 3] 4 5)"
  value: "[6 (4 5)]"

# Let expressions
- name: "let with single name and values"
  expr: "(let [x 1] x)"
  value: 1
- name: "let with multiple names and values"
  expr: "(let [x 1 y 2] [x y])"
  value: "[1 2]"
- name: "let with vector destination and vector value"
  expr: "(let [[x y] [1 2]] (+ x y))"
  value: 3
- name: "let with vector destination and more values in vector value"
  expr: "(let [[x y] [1 2 3 4]] (+ x y))"
  value: 3
- name: "let with double nested vector destination and nested value"
  expr: "(let [[[x y]] [[1 2]]] (+ x y))"
  value: 3
- name: "let with differently nested destinations"
  expr: "(let [a 1 [b] [2 3] [[c] d] [[4 5] 6 7]] [a b c d])"
  value: "[1 2 4 6]"

# String operations
- name: "string chars"
  expr: '(str:chars "foo")'
  value: "['f' 'o' 'o']"
- name: "unicode string chars"
  expr: '(str:chars "你好， 世界")'
  value: "['你' '好' '，' ' ' '世' '界']"
- name: "string split"
  expr: "(str:split \"1x2x3\" 'x')"
  value: '["1" "2" "3"]'

# List operations
- name: "count over list"
  expr: "(count (λ [el] (= el 1)) (list 1 2 1 3 1 4))"
  value: 3
- name: "count over vector"
  expr: "(count (λ [el] (= el 1)) [1 2 1 3 1 4])"
  value: 3
- name: "find in list"
  expr: "(find (λ [el] (= 0 (mod el 2))) (list 1 3 5 1 3 2 4))"
  value: "[5 2]"
- name: "find over vector"
  expr: "(find (λ [el] (= 1 el)) [0 0 0 0 1 1 0])"
  value: "[4 1]"
- name: "reduce with builtin function"
  expr: "(reduce + (list 1 2 3 4))"
  value: 10
- name: "reduce with closure"
  expr: "(reduce (λ [acc x] (if (<= acc x) acc x)) (list 8 2 5 3 1 4))"
  value: 1

# Define
- name: "define a recursive function"
  expr: >-
   (do (define ! (λ [x]
                  (if (<= x 1)
                      1
                      (* x (! (- x 1))))))
       (! 5))
  value: "120"
